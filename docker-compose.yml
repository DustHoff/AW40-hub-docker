version: "3.8"

x-restart-policy: &default_restart_policy
  restart: ${DEFAULT_RESTART_POLICY:-unless-stopped}

services:
  mongo:
    build:
      context: ./mongo
    <<: *default_restart_policy
    env_file:
      - mongo/mongo.env
    hostname: "mongo"
    networks:
      - hubintranet
      - hubnet
    ports:
      - 127.0.0.1:27017:27017
    volumes:
      - mongo-data:/data/db

  keycloak:
    build:
      context: ./keycloak
      args:
        - KC_VER=20.0
    <<: *default_restart_policy
    command: start-dev --import-realm
    container_name: keycloak
    depends_on:
      keycloak-db:
        condition: service_healthy
    env_file:
      - keycloak/keycloak.env
    hostname: "keycloak"
    networks:
      - keycloaknet
      - hubintranet
      - hubnet
    ports:
      - 8080:8080
      - 8443:8443
    volumes:
      - ./keycloak/werkstatthub-realm.json:/opt/keycloak/data/import/wh.json:ro

  keycloak-config:
      image: quay.io/keycloak/keycloak:20.0
      depends_on:
        keycloak:
          condition: service_healthy
      entrypoint: ["sh","-c","chmod +x /init.sh && ./init.sh"]
      env_file:
        - keycloak/keycloak.env
      networks:
        - hubintranet
      user: root
      volumes:
        - ./keycloak/keycloak-config.sh:/init.sh

  keycloak-db:
    build:
      context: ./keycloak-db
    <<: *default_restart_policy
    container_name: keycloak-db
    env_file:
      - keycloak-db/postgres.env
    hostname: "keycloak-db"
    networks:
      - keycloaknet
    volumes:
      - postgres-data:/var/lib/postgresql/data

  minio:
    build:
      context: ./minio
      args:
        - MINIO_VER=RELEASE.2023-05-27T05-56-19Z
    <<: *default_restart_policy
    command: server /data --console-address ":9090"
    depends_on:
      keycloak-config:
        condition: service_completed_successfully
    env_file:
      - minio/minio.env
    hostname: "minio"
    networks:
      - hubintranet
      - hubnet
    ports:
      - 9000:9000
      - 9090:9090
    volumes:
      - minio-data:/data

  minio-config:
      image: minio/mc
      depends_on:
        minio:
          condition: service_healthy
      entrypoint: ["sh","-c","chmod +x /minio-config.sh && ./minio-config.sh"]
      environment:
          - S3_ROOT_USER=${S3_ROOT_USER:?error}
          - S3_ROOT_PASSWORD=${S3_ROOT_PASSWORD:?error}
      networks:
        - hubintranet
      volumes:
        - ./minio/minio-config.sh:/minio-config.sh

  edc:
      build:
        context: ./edc
      <<: *default_restart_policy
      env_file:
        - edc/edc.env
      hostname: "edc"
      networks:
        - hubnet
      depends_on:
          edc-database:
              condition: service_healthy
      ports:
        - 8181:8181
        - 8182:8182
        - 8282:8282
        - 8183:8183
        - 8185:8185
      volumes:
          - ./edc/configs:/configs
          - ./edc/vaults:/vaults
          - ./edc/certs:/certs

  edc-database:
      build:
          context: ./edc-db
      env_file:
          - edc-db/edc-db.env
      hostname: "edc-db"
      networks:
          - hubnet
      volumes:
          - ./edc-db-data:/var/lib/postgresql/data
          - ./edc/sql_tables:/docker-entrypoint-initdb.d/

  api:
    build:
      context: ./api
    <<: *default_restart_policy
    # DEVELOPMENT: run with reload and mount api package code
    command: uvicorn --host 0.0.0.0 --reload api.main:app
    depends_on:
      mongo:
        condition: service_healthy
    env_file:
      - api/api.env
    hostname: "api"
    networks:
      - hubintranet
      - hubnet
      - frontend-backend
    ports:
      - 8000:8000
    volumes:
      - ./api/api/:/home/api/api/

  frontend:
    build:
      context: ./frontend
    <<: *default_restart_policy
    depends_on:
      api:
        condition: service_healthy
    env_file:
      - frontend/frontend.env
    hostname: "frontend"
    networks:
      - frontend-backend
    ports:
      - "4200:80"

  docs:
    build:
      context: ./docs
    <<: *default_restart_policy
    ports:
      - 127.0.0.1:8001:80

networks:
  hubnet:
  hubintranet:
    internal: true
  keycloaknet:
    internal: true
  frontend-backend:

volumes:
  mongo-data:
  postgres-data:
  minio-data:
